// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: services.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SoftwareTransactionalMemoryServiceClient is the client API for SoftwareTransactionalMemoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SoftwareTransactionalMemoryServiceClient interface {
	GetVariable(ctx context.Context, in *GetVariableRequest, opts ...grpc.CallOption) (*GetVariableResponse, error)
	SetVariable(ctx context.Context, in *SetVariableRequest, opts ...grpc.CallOption) (*SetVariableResponse, error)
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	CommitSession(ctx context.Context, in *CommitSessionRequest, opts ...grpc.CallOption) (*CommitSessionResponse, error)
}

type softwareTransactionalMemoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSoftwareTransactionalMemoryServiceClient(cc grpc.ClientConnInterface) SoftwareTransactionalMemoryServiceClient {
	return &softwareTransactionalMemoryServiceClient{cc}
}

func (c *softwareTransactionalMemoryServiceClient) GetVariable(ctx context.Context, in *GetVariableRequest, opts ...grpc.CallOption) (*GetVariableResponse, error) {
	out := new(GetVariableResponse)
	err := c.cc.Invoke(ctx, "/services.SoftwareTransactionalMemoryService/GetVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softwareTransactionalMemoryServiceClient) SetVariable(ctx context.Context, in *SetVariableRequest, opts ...grpc.CallOption) (*SetVariableResponse, error) {
	out := new(SetVariableResponse)
	err := c.cc.Invoke(ctx, "/services.SoftwareTransactionalMemoryService/SetVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softwareTransactionalMemoryServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, "/services.SoftwareTransactionalMemoryService/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softwareTransactionalMemoryServiceClient) CommitSession(ctx context.Context, in *CommitSessionRequest, opts ...grpc.CallOption) (*CommitSessionResponse, error) {
	out := new(CommitSessionResponse)
	err := c.cc.Invoke(ctx, "/services.SoftwareTransactionalMemoryService/CommitSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoftwareTransactionalMemoryServiceServer is the server API for SoftwareTransactionalMemoryService service.
// All implementations must embed UnimplementedSoftwareTransactionalMemoryServiceServer
// for forward compatibility
type SoftwareTransactionalMemoryServiceServer interface {
	GetVariable(context.Context, *GetVariableRequest) (*GetVariableResponse, error)
	SetVariable(context.Context, *SetVariableRequest) (*SetVariableResponse, error)
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	CommitSession(context.Context, *CommitSessionRequest) (*CommitSessionResponse, error)
	mustEmbedUnimplementedSoftwareTransactionalMemoryServiceServer()
}

// UnimplementedSoftwareTransactionalMemoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSoftwareTransactionalMemoryServiceServer struct {
}

func (UnimplementedSoftwareTransactionalMemoryServiceServer) GetVariable(context.Context, *GetVariableRequest) (*GetVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariable not implemented")
}
func (UnimplementedSoftwareTransactionalMemoryServiceServer) SetVariable(context.Context, *SetVariableRequest) (*SetVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVariable not implemented")
}
func (UnimplementedSoftwareTransactionalMemoryServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedSoftwareTransactionalMemoryServiceServer) CommitSession(context.Context, *CommitSessionRequest) (*CommitSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitSession not implemented")
}
func (UnimplementedSoftwareTransactionalMemoryServiceServer) mustEmbedUnimplementedSoftwareTransactionalMemoryServiceServer() {
}

// UnsafeSoftwareTransactionalMemoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoftwareTransactionalMemoryServiceServer will
// result in compilation errors.
type UnsafeSoftwareTransactionalMemoryServiceServer interface {
	mustEmbedUnimplementedSoftwareTransactionalMemoryServiceServer()
}

func RegisterSoftwareTransactionalMemoryServiceServer(s grpc.ServiceRegistrar, srv SoftwareTransactionalMemoryServiceServer) {
	s.RegisterService(&SoftwareTransactionalMemoryService_ServiceDesc, srv)
}

func _SoftwareTransactionalMemoryService_GetVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareTransactionalMemoryServiceServer).GetVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SoftwareTransactionalMemoryService/GetVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareTransactionalMemoryServiceServer).GetVariable(ctx, req.(*GetVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoftwareTransactionalMemoryService_SetVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareTransactionalMemoryServiceServer).SetVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SoftwareTransactionalMemoryService/SetVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareTransactionalMemoryServiceServer).SetVariable(ctx, req.(*SetVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoftwareTransactionalMemoryService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareTransactionalMemoryServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SoftwareTransactionalMemoryService/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareTransactionalMemoryServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoftwareTransactionalMemoryService_CommitSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareTransactionalMemoryServiceServer).CommitSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.SoftwareTransactionalMemoryService/CommitSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareTransactionalMemoryServiceServer).CommitSession(ctx, req.(*CommitSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SoftwareTransactionalMemoryService_ServiceDesc is the grpc.ServiceDesc for SoftwareTransactionalMemoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SoftwareTransactionalMemoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.SoftwareTransactionalMemoryService",
	HandlerType: (*SoftwareTransactionalMemoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVariable",
			Handler:    _SoftwareTransactionalMemoryService_GetVariable_Handler,
		},
		{
			MethodName: "SetVariable",
			Handler:    _SoftwareTransactionalMemoryService_SetVariable_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _SoftwareTransactionalMemoryService_CreateSession_Handler,
		},
		{
			MethodName: "CommitSession",
			Handler:    _SoftwareTransactionalMemoryService_CommitSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
